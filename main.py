import telebot
from functions import *
import logging

logging.basicConfig(level=logging.INFO, filename='ShopBotLogging.log')
logger = logging.getLogger('Logger')


logger.info('App is running')
bot = telebot.TeleBot('1642629677:AAHs3L6nV8rnJHE7MZxyw-sZJHH8C07BBNQ')
products = {'beef': '–º—è—Å–Ω–∞—è –ª–∞–ø—à–∞',
            'chicken': '–∫—É—Ä–∏–Ω–∞—è –ª–∞–ø—à–∞',
            'caramel': '–ú–æ–ª–æ—á–Ω–∞—è –∫–æ–Ω—Ñ–µ—Ç–∞',
            'sugar': '–ú—è—Ç–Ω–∞—è –∫–æ–Ω—Ñ–µ—Ç–∞'
}
basket = Basket()


def get_address(msg):
    basket.add_address(msg.text, msg.chat.id)
    bot.send_message(msg.chat.id, f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–¥—Ä–µ—Å: {msg.text}', reply_markup=markup_confirm())


@bot.message_handler(commands=['start'])
def start(message):
    basket.add_user(message.chat.id)
    msg = f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}, –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ.\n\n'
    msg += 'üìå –ù–∞–∂–º–∏—Ç–µ "–ö–∞—Ç–∞–ª–æ–≥" —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.\n'
    msg += 'üìå –ù–∞–∂–º–∏—Ç–µ "–ö–æ–Ω—Ç–∞–∫—Ç—ã" —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.\n'
    msg += 'üìå –ù–∞–∂–º–∏—Ç–µ "–ö–æ—Ä–∑–∏–Ω–∞" —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.\n'
    bot.send_message(message.chat.id, msg, reply_markup=markup_menu())
    info = f'{message.chat.id} started ShopBot'
    logger.info(info)


@bot.message_handler(content_types=['text'])
def text(message):
    if message.text == 'üí∞ –ö–∞—Ç–∞–ª–æ–≥':
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=markup_catalog())
    if message.text == 'üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        msg = ''
        msg += '–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n'
        msg += '‚úâ –¢–µ–ª–µ–≥—Ä–∞–º - @AlmazAndukov\n'
        msg += '‚òé –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä - 89869264375'
        bot.send_message(message.chat.id, msg)
    if message.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
        msg = basket.get_basket(message.chat.id)
        if msg:
            bot.send_message(message.chat.id, msg, reply_markup=markup_basket())
        else:
            bot.send_message(message.chat.id, '–ö–æ—Ä–∑–∏–Ω–∞ –µ—â—ë –ø—É—Å—Ç–∞, —Å–æ–≤–µ—Ç—É—é –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ üòâ')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global products, candies, basket
    try:
        if call.message:
            if 'buy' == call.data:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ ‚úà:', reply_markup=cancel_buy())
                bot.register_next_step_handler(msg, get_address)
            elif 'cancel_buy' == call.data:
                bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=markup_catalog())
            elif 'go_back' == call.data:
                bot.delete_message(call.message.chat.id, call.message.message_id)

            elif 'add_' in call.data:
                _, product, price = call.data.split('_')
                add = basket.add_product(product, price, call.message.chat.id)
                if add:
                    msg = f'–£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {products[product]}'
                    msg = f'{msg}. –í –∫–æ—Ä–∑–∏–Ω–µ - {basket.get_count(product, call.message.chat.id)} ({products[product]})'
                    bot.answer_callback_query(call.id, show_alert=False, text=msg)
                else:
                    msg = f'–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {products[product]} –≤ –∫–æ—Ä–∑–∏–Ω—É'
                    bot.answer_callback_query(call.id, show_alert=False, text=msg)

            elif 'del_' in call.data:
                _, product, price = call.data.split('_')
                delete = basket.delete_product(product, price, call.message.chat.id)
                if delete:
                    msg = '–£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'
                    msg = f'{msg}. –í –∫–æ—Ä–∑–∏–Ω–µ - {basket.get_count(product, call.message.chat.id)} ({products[product]})'
                    bot.answer_callback_query(call.id, show_alert=False, text=msg)
                else:
                    bot.answer_callback_query(call.id, show_alert=False, text=f'–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏–µ {products[product]} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')

            elif 'get_' in call.data:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                _, product, price = call.data.split('_')
                # is_fruit = is_product_fruit(product)
                bot.send_photo(call.message.chat.id, open(f'{product}.png', 'rb'), reply_markup=markup_product(product, price))

            elif 'go_to_candies' == call.data:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_photo(call.message.chat.id, open('candies.png', 'rb'), reply_markup=markup_candies())

            elif 'go_to_noodles' == call.data:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_photo(call.message.chat.id, open('noodles.jpg', 'rb'), reply_markup=markup_noodles())

            elif 'go_to_catalog' == call.data:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=markup_catalog())
            elif 'address_' in call.data:
                _, status = call.data.split('_')
                bot.delete_message(call.message.chat.id, call.message.message_id)
                if status == 'ok':
                    msg = basket.built_basket(call.message)
                    bot.send_message(-496190531, msg)
                    bot.send_message(call.message.chat.id, '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –∏'
                                                           ' –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üòâ')
                    info = f'{call.message.chat.id} bought'
                    logger.info(info)
                else:
                    msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–Ω–æ–≤–æ:')
                    bot.register_next_step_handler(msg, get_address)

    except Exception as e:
        print(e)


bot.polling(none_stop=True)
